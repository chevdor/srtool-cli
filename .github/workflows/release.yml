# This workflow runs on every push and checks whether everything looks good

name: Release

on:
  push:
    tags:
      - "v*"

# We use Docker for now due to:
# https://github.com/actions/runner/issues/505
env:
  ENGINE: docker

jobs:
  linux:
    env:
      TARGET_DIR: target/release

    runs-on: ubuntu-latest
    steps:
      - name: Docker fix
        if: runner.os != 'Linux'
        run: sudo ln -s ~/.docker/run/docker.sock /var/run/docker.sock

      - uses: actions/checkout@v4

      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Install cargo deb
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb

      - name: Build debian package
        shell: bash
        run: |
          cargo deb -p srtool-cli -o "srtool_linux_amd64.deb"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            srtool_linux_amd64.deb

  macos_intel:
    env:
      TARGET_DIR: target/release

    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Release Version
        run: |
          echo GITHUB_REF=$GITHUB_REF
          RELEASE_VERSION=${GITHUB_REF#refs/*/}
          RAW_VERSION=${RELEASE_VERSION:1}
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RAW_VERSION=$RAW_VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Check tooling
        shell: bash
        run: |
          tar --version
          shasum --version

      - name: Build MacOS binary
        shell: bash
        run: |
          cargo build --release
          ls -al "${{ env.TARGET_DIR }}/srtool"

      - name: Compress & sha256
        run: |
          tar -czf ${{ env.TARGET_DIR }}/srtool_macos_intel.tar.gz -C ${{ env.TARGET_DIR }} srtool
          SHA256=$(shasum -a 256 ${{ env.TARGET_DIR }}/srtool_macos_intel.tar.gz | awk '{ print $1}' | tee ${{ env.TARGET_DIR }}/srtool_macos_intel.tar.gz.sha256)
          echo SHA256: $SHA256
          echo "SHA256=$SHA256" >> $GITHUB_ENV

      - name: Upload MacOS Intel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos_intel
          path: |
            ${{ env.TARGET_DIR }}/srtool
            ${{ env.TARGET_DIR }}/srtool_macos_intel.tar.gz
            ${{ env.TARGET_DIR }}/srtool_macos_intel.tar.gz.sha256

      - name: Install tera MacOS binary v0.1.3
        run: |
          URL=https://github.com/chevdor/tera-cli/releases/download/v0.1.3/tera-macos-v0.1.3.tar.gz
          wget $URL
          tar xvf tera-macos-v0.1.3.tar.gz -C /usr/local/bin
          tera --version

      # We do that before checking out master (in case we were not in master already)
      - name: Prepare new Formula
        env:
          NAME: Srtool
          DESCRIPTION: "A command line utility to easily use the srtool docker image"
          SITE: https://github.com
          REPO: chevdor/srtool-cli
          SHA256: ${{env.SHA256}}
          VERSION: ${{env.RAW_VERSION}}
        run: |
          tera --version
          tera --template templates/formula.rb --env-only > $HOME/srtool.rb
          cat $HOME/srtool.rb

      - name: Update Homebrew Formula
        run: |
          cp -f $HOME/srtool.rb Formula/srtool.rb
          git config --global user.name 'TeraBot'
          git config --global user.email 'chevdor@users.noreply.github.com'
          git commit Formula/srtool.rb -m "build: new homebrew formula for ${{ env.RELEASE_VERSION }}"
          git push origin HEAD:master

  macos_arm64:
    env:
      TARGET_DIR: target/release

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Release Version
        run: |
          echo GITHUB_REF=$GITHUB_REF
          RELEASE_VERSION=${GITHUB_REF#refs/*/}
          RAW_VERSION=${RELEASE_VERSION:1}
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RAW_VERSION=$RAW_VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Check tooling
        shell: bash
        run: |
          tar --version
          shasum --version

      - name: Build MacOS binary
        shell: bash
        run: |
          cargo build --release
          ls -al "${{ env.TARGET_DIR }}/srtool"

      - name: Compress & sha256
        run: |
          tar -czf ${{ env.TARGET_DIR }}/srtool_macos_arm64.tar.gz -C ${{ env.TARGET_DIR }} srtool
          SHA256=$(shasum -a 256 ${{ env.TARGET_DIR }}/srtool_macos_arm64.tar.gz | awk '{ print $1}' | tee ${{ env.TARGET_DIR }}/srtool_macos_arm64.tar.gz.sha256)
          echo SHA256: $SHA256
          echo "SHA256=$SHA256" >> $GITHUB_ENV

      - name: Upload MacOS ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos_arm64
          path: |
            ${{ env.TARGET_DIR }}/srtool
            ${{ env.TARGET_DIR }}/srtool_macos_arm64.tar.gz
            ${{ env.TARGET_DIR }}/srtool_macos_arm64.tar.gz.sha256

      # - name: Install tera MacOS binary v0.1.3
      #   run: |
      #     URL=https://github.com/chevdor/tera-cli/releases/download/v0.1.3/tera-macos-v0.1.3.tar.gz
      #     wget $URL
      #     tar xvf tera-macos-v0.1.3.tar.gz -C /usr/local/bin
      #     tera --version

      # # We do that before checking out master (in case we were not in master already)
      # - name: Prepare new Formula
      #   env:
      #     NAME: Srtool
      #     DESCRIPTION: "A command line utility to easily use the srtool docker image"
      #     SITE: https://github.com
      #     REPO: chevdor/srtool-cli
      #     SHA256: ${{env.SHA256}}
      #     VERSION: ${{env.RAW_VERSION}}
      #   run: |
      #     tera --version
      #     tera --template templates/formula.rb --env-only > $HOME/srtool.rb
      #     cat $HOME/srtool.rb

      # - name: Update Homebrew Formula
      #   run: |
      #     cp -f $HOME/srtool.rb Formula/srtool.rb
      #     git config --global user.name 'TeraBot'
      #     git config --global user.email 'chevdor@users.noreply.github.com'
      #     git commit Formula/srtool.rb -m "build: new homebrew formula for ${{ env.RELEASE_VERSION }}"
      #     git push origin HEAD:master

  macos:
    runs-on: ubuntu-latest
    needs: ["macos_arm64", "macos_intel"]
    steps:
      - name: NOOP
        run: echo "NOOP"

  create_draft:
    needs: ["linux", "macos"]
    name: Create Draft
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Release Version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4

      - name: Install tera v0.1.3
        run: |
          URL=https://github.com/chevdor/tera-cli/releases/download/v0.1.3/tera-cli_linux_amd64.deb
          wget $URL
          sudo dpkg -i tera-cli_linux_amd64.deb
          tera --version

      - name: Generate changelog
        id: change_log
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 ${{ env.RELEASE_VERSION }}^ )
          JSON=$(git log $LAST_TAG..HEAD \
            --pretty=format:'{ "commit": "%H", "short_sha": "%h", "author": "%an", "date": "%ad", "message": "%s"},' \
            $@ | \
            perl -pe 'BEGIN{print "{ \"since\": \"'${LAST_TAG}'\",  \"commits\": ["}; END{print "]}"}' | \
            perl -pe 's/},]/}]/')
          echo $JSON | tera --template templates/changelog.md --stdin > changelog.md

      - name: Render release notes
        run: |
          export DEBIAN_URL="https://github.com/chevdor/srtool-cli/releases/download/${{ env.RELEASE_VERSION }}/srtool_linux_amd64_${{ env.RELEASE_VERSION }}.deb"
          export MACOS_INTEL_TGZ_URL="https://github.com/chevdor/srtool-cli/releases/download/${{ env.RELEASE_VERSION }}/srtool_macos_intel_${{ env.RELEASE_VERSION }}.tar.gz"
          export MACOS_ARM64_TGZ_URL="https://github.com/chevdor/srtool-cli/releases/download/${{ env.RELEASE_VERSION }}/srtool_macos_arm64_${{ env.RELEASE_VERSION }}.tar.gz"
          export VERSION="${{ env.RELEASE_VERSION }}"
          export CHANGELOG=$(cat changelog.md)
          tera --env --env-only --template templates/release.md > RELEASE_NOTES.md

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Srtool ${{ env.RELEASE_VERSION }} (${{ env.SHORT_SHA }})
          body_path: ./RELEASE_NOTES.md
          draft: true

  publish-binaries:
    runs-on: ubuntu-latest
    needs: ["create_draft"]
    steps:
      - uses: actions/checkout@v4
      - name: Get Release Version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4

      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.asset_upload_url }}
          asset_path: "linux/srtool_linux_amd64.deb"
          asset_name: "srtool_linux_amd64_${{ env.RELEASE_VERSION }}.deb"
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload MacOS Intel archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.asset_upload_url }}
          asset_path: "macos_intel/srtool_macos_intel.tar.gz"
          asset_name: "srtool_macos_intel_${{ env.RELEASE_VERSION }}.tar.gz"
          asset_content_type: application/gzip

      - name: Upload MacOS ARM64 archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.asset_upload_url }}
          asset_path: "macos_arm64/srtool_macos_arm64.tar.gz"
          asset_name: "srtool_macos_arm64_${{ env.RELEASE_VERSION }}.tar.gz"
          asset_content_type: application/gzip
